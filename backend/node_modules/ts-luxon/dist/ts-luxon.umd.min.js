!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).tsLuxon={})}(this,(function(e){"use strict";class t extends Error{}class r extends t{constructor(e){super(`Invalid DateTime: ${e.toMessage()}`)}}class s extends t{constructor(e){super(`Invalid Duration: ${e.toMessage()}`)}}class n extends t{constructor(e){super(`Invalid Interval: ${e.toMessage()}`)}}class i extends t{constructor(e){super(`Invalid unit ${e}`),Object.setPrototypeOf(this,i.prototype)}}class a extends t{constructor(e){super(`${e} is an invalid or unknown zone specifier`),Object.setPrototypeOf(this,a.prototype)}}class o extends t{constructor(e){super(e),Object.setPrototypeOf(this,o.prototype)}}class u extends t{constructor(e){super(e),Object.setPrototypeOf(this,u.prototype)}}class l extends t{constructor(){super("Zone is an abstract class"),Object.setPrototypeOf(this,l.prototype)}}var c=Intl;function h(e){return void 0!==e}function d(e){return void 0===e}function m(e){return"number"==typeof e}function f(e){return m(e)&&e%1==0}function y(){try{return void 0!==c&&!!c.RelativeTimeFormat}catch(e){return!1}}function _(e,t,r){if(0!==e.length)return e.reduce(((e,s)=>(s=[t(s),s],r(e[0],s[0])===e[0]?e:s)),[t(e[0]),e[0]])[1]}function g(e,t,r){return f(e)&&t<=e&&e<=r}function v(e,t=2){var r=e<0?"-":"";const s=r?-1*+e:e;let n;return n=s.toString().length<t?("0".repeat(t)+s).slice(-t):s.toString(),`${r}${n}`}function p(e){if(e)return parseInt(e,10)}function w(e){if(e)return parseFloat(e)}function O(e){if(!d(e)&&null!==e&&""!==e)return e=1e3*parseFloat("0."+e),Math.floor(e)}function b(e,t,r=!1){const s=Math.pow(10,t);return(r?Math.trunc:Math.round)(e*s)/s}function T(e){return e%4==0&&(e%100!=0||e%400==0)}function S(e){return T(e)?366:365}function k(e,t){var r,s;return[31,T(e+(t-(s=(r=t-1)-(s=12)*Math.floor(r/s)+1))/12)?29:28,31,30,31,30,31,31,30,31,30,31][s-1]}function M(e){var t=Date.UTC(e.year,e.month-1,e.day,e.hour,e.minute,e.second,e.millisecond);if(g(e.year,0,99)){const e=new Date(t);return e.setUTCFullYear(e.getUTCFullYear()-1900),e.getTime()}return t}function N(e){var t=(e+Math.floor(e/4)-Math.floor(e/100)+Math.floor(e/400))%7;e=((e=e-1)+Math.floor(e/4)-Math.floor(e/100)+Math.floor(e/400))%7;return 4==t||3==e?53:52}function D(e){return 99<e?e:60<e?1900+e:2e3+e}function E(e,t,r,s){return e=new Date(e),s=Object.assign({timeZoneName:t},{hourCycle:"h23",year:"numeric",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit",timeZone:s}),(e=new c.DateTimeFormat(r,s).formatToParts(e).find((e=>"timezonename"===e.type.toLowerCase())))?e.value:null}function j(e,t){let r=parseInt(e,10);return Number.isNaN(r)&&(r=0),t=parseInt(t,10)||0,60*r+(t=r<0||Object.is(r,-0)?-t:t)}function x(e){var t=Number(e);if("boolean"==typeof e||""===e||Number.isNaN(t))throw new u(`Invalid unit value ${e}`);return t}function I(e,t){return Object.keys(e).reduce(((r,s)=>(void 0!==e[s]&&null!==e[s]&&(r[t(s)]=x(e[s])),r)),{})}function V(e,t){var r=Math.trunc(Math.abs(e/60)),s=Math.trunc(Math.abs(e%60)),n=0<=e?"+":"-";switch(t){case"short":return`${n}${v(r,2)}:${v(s,2)}`;case"narrow":return`${n}${r}${0<s?`:${s}`:""}`;case"techie":return`${n}${v(r,2)}${v(s,2)}`;default:throw new RangeError(`Value format ${t} is out of range for property format`)}}function C(e){return t=e,["hour","minute","second","millisecond"].reduce(((e,r)=>(e[r]=t[r],e)),{});var t}var F=/[A-Za-z_+-]{1,256}(?::?\/[A-Za-z0-9_+-]{1,256}(?:\/[A-Za-z0-9_+-]{1,256})?)?/;const $=["years","quarters","months","weeks","days","hours","minutes","seconds","milliseconds"],Z=$.slice(0).reverse(),L=["years","months","days","hours","minutes","seconds","milliseconds"];const z={year:ot="numeric",month:ot,day:ot};var q={year:ot,month:at="short",day:ot},A={year:ot,month:at,day:ot,weekday:at},U={year:ot,month:ut="long",day:ot},W={year:ot,month:ut,day:ot,weekday:ut},R={hour:ot,minute:ot},P={hour:ot,minute:ot,second:ot},H={hour:ot,minute:ot,second:ot,timeZoneName:at},J={hour:ot,minute:ot,second:ot,timeZoneName:ut},Y={hour:ot,minute:ot,hourCycle:"h23"},G={hour:ot,minute:ot,second:ot,hourCycle:"h23"},B={hour:ot,minute:ot,second:ot,hourCycle:"h23",timeZoneName:at},Q={hour:ot,minute:ot,second:ot,hourCycle:"h23",timeZoneName:ut},K={year:ot,month:ot,day:ot,hour:ot,minute:ot},X={year:ot,month:ot,day:ot,hour:ot,minute:ot,second:ot},ee={year:ot,month:at,day:ot,hour:ot,minute:ot},te={year:ot,month:at,day:ot,hour:ot,minute:ot,second:ot},re={year:ot,month:at,day:ot,weekday:at,hour:ot,minute:ot},se={year:ot,month:ut,day:ot,hour:ot,minute:ot,timeZoneName:at},ne={year:ot,month:ut,day:ot,hour:ot,minute:ot,second:ot,timeZoneName:at},ie={year:ot,month:ut,day:ot,weekday:ut,hour:ot,minute:ot,timeZoneName:ut},ae={year:ot,month:ut,day:ot,weekday:ut,hour:ot,minute:ot,second:ot,timeZoneName:ut};const oe=["January","February","March","April","May","June","July","August","September","October","November","December"],ue=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],le=["J","F","M","A","M","J","J","A","S","O","N","D"];function ce(e){switch(e){case"narrow":return[...le];case"short":return[...ue];case"long":return[...oe];case"numeric":return["1","2","3","4","5","6","7","8","9","10","11","12"];case"2-digit":return["01","02","03","04","05","06","07","08","09","10","11","12"]}}const he=["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"],de=["Mon","Tue","Wed","Thu","Fri","Sat","Sun"],me=["M","T","W","T","F","S","S"];function fe(e){switch(e){case"narrow":return[...me];case"short":return[...de];case"long":return[...he];case"numeric":return["1","2","3","4","5","6","7"]}}const ye=["AM","PM"],_e=["Before Christ","Anno Domini"],ge=["BC","AD"],ve=["B","A"];function pe(e){switch(e){case"narrow":return[...ve];case"short":return[...ge];case"long":return[..._e]}}function we(...e){e.length}class Oe{get type(){throw new l}get ianaName(){return this.name}get name(){throw new l}get isUniversal(){throw new l}offsetName(e,t){throw we(e,t),new l}formatOffset(e,t){throw we(e,t),new l}offset(e){throw we(e),new l}equals(e){throw we(e),new l}get isValid(){throw new l}}let be={};const Te={year:0,month:1,day:2,era:3,hour:4,minute:5,second:6};let Se={};class ke extends Oe{constructor(e){super(),this._zoneName=e,this._valid=ke.isValidZone(e)}static create(e){return Se[e]||(Se[e]=new ke(e)),Se[e]}static resetCache(){Se={},be={}}static isValidSpecifier(e){return this.isValidZone(e)}static isValidZone(e){if(!e)return!1;try{return new c.DateTimeFormat("en-US",{timeZone:e}).format(),!0}catch(e){return!1}}get type(){return"iana"}get name(){return this._zoneName}get isUniversal(){return!1}offsetName(e,{format:t,locale:r}={}){return E(e,t,r,this.name)}formatOffset(e,t){return V(this.offset(e),t)}offset(e){var t=new Date(e);if(isNaN(+t))return NaN;var r=function(e){if(!be[e])try{be[e]=new c.DateTimeFormat("en-US",{hour12:!1,timeZone:e,year:"numeric",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit",second:"2-digit",era:"short"})}catch(t){throw new a(e)}return be[e]}(this.name);let s;var[n,i,o,u,l,e,r]=(typeof r.formatToParts==typeof isNaN?function(e,t){var r=e.formatToParts(t);const s=[];for(let e=0;e<r.length;e++){var{type:n,value:i}=r[e],a=Te[n];"era"===n?s[a]=i:d(a)||(s[a]=parseInt(i,10))}return s}:function(e,t){var r=e.format(t).replace(/\u200E/g,""),[,s,n,i,a,e,t,r]=/(\d+)\/(\d+)\/(\d+) (AD|BC),? (\d+):(\d+):(\d+)/.exec(r);return[i,s,n,a,e,t,r]})(r,t);return"BC"===u&&(s=1-Math.abs(+n)),t=(u=+t)%1e3,(M({year:s||+n,month:+i,day:+o,hour:+(24===l?0:l),minute:+e,second:+r,millisecond:0})-(u-=0<=t?t:1e3+t))/6e4}equals(e){return"iana"===e.type&&e.name===this.name}get isValid(){return this._valid}}let Me=null;class Ne extends Oe{constructor(e){super(),this._fixed=e}static get utcInstance(){return null===Me&&(Me=new Ne(0)),Me}get isValid(){return!0}get ianaName(){return 0===this._fixed?"Etc/UTC":`Etc/GMT${V(-this._fixed,"narrow")}`}get name(){return 0===this._fixed?"UTC":`UTC${V(this._fixed,"narrow")}`}get type(){return"fixed"}get isUniversal(){return!0}static instance(e){return 0===e?Ne.utcInstance:new Ne(e)}static parseSpecifier(e){return e&&(e=e.match(/^utc(?:([+-]\d{1,2})(?::(\d{2}))?)?$/i))?new Ne(j(e[1],e[2])):null}offsetName(){return this.name}formatOffset(e,t){return V(this._fixed,t)}offset(){return this._fixed}equals(e){return"fixed"===e.type&&e._fixed===this._fixed}}class De extends Oe{constructor(e){super(),this._zoneName=e,Object.setPrototypeOf(this,De.prototype)}get type(){return"invalid"}get name(){return this._zoneName}get isUniversal(){return!1}offsetName(){return null}formatOffset(){return""}offset(){return NaN}equals(){return!1}get isValid(){return!1}}const Ee=(e,t)=>{if(d(e)||null===e)return t;if(e instanceof Oe)return e;if("string"!=typeof e)return m(e)?Ne.instance(e):"object"==typeof e&&e.offset&&"number"==typeof e.offset?e:new De(e);var r=e.toLowerCase();return"local"===r||"system"===r?t:"utc"===r||"gmt"===r?Ne.utcInstance:Ne.parseSpecifier(r)||ke.create(e)};let je=null;class xe extends Oe{static get instance(){return null===je&&(je=new xe),je}get type(){return"system"}get name(){return(new Intl.DateTimeFormat).resolvedOptions().timeZone}get isUniversal(){return!1}offsetName(e,{format:t,locale:r}){return E(e,t,r)}formatOffset(e,t){return V(this.offset(e),t)}offset(e){return-new Date(e).getTimezoneOffset()}equals(e){return"system"===e.type}get isValid(){return!0}}let Ie,Ve,Ce,Fe=()=>Date.now(),$e="system",Ze=!1;class Le{static get now(){return Fe}static set now(e){Fe=e}static set defaultZoneLike(e){$e=e}static set defaultZone(e){$e=e}static get defaultZone(){return Ee($e,xe.instance)}static get defaultLocale(){return Ie}static set defaultLocale(e){Ie=e}static get defaultNumberingSystem(){return Ve}static set defaultNumberingSystem(e){Ve=e}static get defaultOutputCalendar(){return Ce}static set defaultOutputCalendar(e){Ce=e}static get throwOnInvalid(){return Ze}static set throwOnInvalid(e){Ze=e}static resetCaches(){Ge.resetCache(),ke.resetCache()}}let ze={},qe={};function Ae(e,t={}){var r=JSON.stringify([e,t]);let s=qe[r];return s||(s=new c.DateTimeFormat(e,t),qe[r]=s),s}let Ue,We={},Re={};function Pe(e,t,r,s){return("en"===e.listingMode()?r:s)(t)}class He{constructor(e,t,r){this._padTo=r.padTo||0,this._floor=r.floor||!1;var s=function(e,t){var r={};for(n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols)for(var s=0,n=Object.getOwnPropertySymbols(e);s<n.length;s++)t.indexOf(n[s])<0&&Object.prototype.propertyIsEnumerable.call(e,n[s])&&(r[n[s]]=e[n[s]]);return r}(r,["padTo","floor"]);if(!t||0<Object.keys(s).length){const t=Object.assign({useGrouping:!1},r);0<this._padTo&&(t.minimumIntegerDigits=r.padTo),this._inf=function(e,t){var r=JSON.stringify([e,t]);let s=We[r];return s||(s=new c.NumberFormat(e,t),We[r]=s),s}(e,t)}}format(e){if(this._inf){var t=this._floor?Math.floor(e):e;return this._inf.format(t)}return v(this._floor?Math.floor(e):b(e,3),this._padTo)}}class Je{constructor(e,t,r){let s;var n;this._opts=r,e.zone.isUniversal?(n=0<=(n=e.offset/60*-1)?`Etc/GMT+${n}`:`Etc/GMT${n}`,0!==e.offset&&ke.create(n).isValid?(s=n,this._dt=e):(s="UTC",r.timeZoneName?this._dt=e:this._dt=0===e.offset?e:Vr.fromMillis(e.ts+60*e.offset*1e3))):"system"===e.zone.type?this._dt=e:(this._dt=e,s=e.zone.name);const i=Object.assign({},this._opts);s&&(i.timeZone=s),this._dtf=Ae(t,i)}format(){return this._dtf.format(this._dt.toJSDate())}formatToParts(){return this._dtf.formatToParts(this._dt.toJSDate())}resolvedOptions(){return this._dtf.resolvedOptions()}}class Ye{constructor(e,t,r){this._opts=Object.assign({style:"long"},r),!t&&y()&&(this._rtf=function(e,t={}){var r=JSON.stringify([e,t]);let s=Re[r];return s||(s=new c.RelativeTimeFormat(e,t),Re[r]=s),s}(e,r))}format(e,t){return this._rtf?this._rtf.format(e,t):function(e,t,r="always",s){var n=qt.normalizeUnit(e),i={years:["year","yr."],quarters:["quarter","qtr."],months:["month","mo."],weeks:["week","wk."],days:["day","day","days"],hours:["hour","hr."],minutes:["minute","min."],seconds:["second","sec."],milliseconds:[]}[n];e=-1===["hours","minutes","seconds"].indexOf(n);if("auto"===r&&e){var a="days"===n;switch(t){case 1:return a?"tomorrow":`next ${i[0]}`;case-1:return a?"yesterday":`last ${i[0]}`;case 0:return a?"today":`this ${i[0]}`}}return r=Object.is(t,-0)||t<0,t=1===(e=Math.abs(t)),n=s?!t&&i[2]||i[1]:t?i[0]:n,r?`${e} ${n} ago`:`in ${e} ${n}`}(t,e,this._opts.numeric,"long"!==this._opts.style)}formatToParts(e,t){return this._rtf?this._rtf.formatToParts(e,t):[]}}class Ge{constructor(e,t,r,s){var[n,i,e]=function(e){if(-1===(r=e.indexOf("-u-")))return[e];{let s;var t=e.substring(0,r);try{s=Ae(e).resolvedOptions()}catch(e){s=Ae(t).resolvedOptions()}var{numberingSystem:r,calendar:e}=s;return[t,r,e]}}(e);this.locale=n,this.numberingSystem=t||i,this.outputCalendar=r||e,this._intl=(i=this.locale,r=this.numberingSystem,((e=this.outputCalendar)||r)&&(i+="-u",e&&(i+=`-ca-${e}`),r&&(i+=`-nu-${r}`)),i),this._weekdaysCache={format:{},standalone:{}},this._monthsCache={format:{},standalone:{}},this._meridiemCache=void 0,this._eraCache={},this._specifiedLocale=s,this._fastNumbersCached=void 0}get fastNumbers(){return void 0===this._fastNumbersCached&&(this._fastNumbersCached=this._supportsFastNumbers()),this._fastNumbersCached}static fromOpts(e){return Ge.create(e.locale,e.numberingSystem,e.outputCalendar,e.defaultToEN)}static create(e,t,r,s=!1){return s=(e=e||Le.defaultLocale)||(s?"en-US":(Ue=Ue||(new c.DateTimeFormat).resolvedOptions().locale,Ue)),t=t||Le.defaultNumberingSystem,r=r||Le.defaultOutputCalendar,new Ge(s,t,r,e)}static resetCache(){Ue=void 0,ze={},qe={},We={},Re={}}static fromObject({locale:e,numberingSystem:t,outputCalendar:r}={}){return Ge.create(e,t,r)}listingMode(){var e=this.isEnglish(),t=!(null!==this.numberingSystem&&"latn"!==this.numberingSystem||null!==this.outputCalendar&&"gregory"!==this.outputCalendar);return e&&t?"en":"intl"}clone(e){return e&&0!==Object.getOwnPropertyNames(e).length?Ge.create(e.locale||this._specifiedLocale,e.numberingSystem||this.numberingSystem,e.outputCalendar||this.outputCalendar,e.defaultToEN||!1):this}redefaultToEN(e={}){return this.clone(Object.assign(Object.assign({},e),{defaultToEN:!0}))}redefaultToSystem(e={}){return this.clone(Object.assign(Object.assign({},e),{defaultToEN:!1}))}months(e,t=!1){return Pe(this,e,ce,(e=>{const r=t?{month:e,day:"numeric"}:{month:e},s=t?"format":"standalone";return this._monthsCache[s][e]||(this._monthsCache[s][e]=function(e){const t=[];for(let s=1;s<=12;s++){var r=Vr.utc(2016,s,1);t.push(e(r))}return t}((e=>this.extract(e,r,"month")))),this._monthsCache[s][e]}))}weekdays(e,t=!1){return Pe(this,e,fe,(e=>{const r=t?{weekday:e,year:"numeric",month:"long",day:"numeric"}:{weekday:e};var s=t?"format":"standalone";return this._weekdaysCache[s][e]||(this._weekdaysCache[s][e]=function(e){const t=[];for(let s=1;s<=7;s++){var r=Vr.utc(2016,11,13+s);t.push(e(r))}return t}((e=>this.extract(e,r,"weekday")))),this._weekdaysCache[s][e]}))}meridiems(){return Pe(this,"long",(()=>ye),(()=>(void 0===this._meridiemCache&&(this._meridiemCache=[Vr.utc(2016,11,13,9),Vr.utc(2016,11,13,19)].map((e=>this.extract(e,{hour:"numeric",hourCycle:"h12"},"dayPeriod")))),this._meridiemCache)))}eras(e){return Pe(this,e,pe,(e=>{const t={era:e};return this._eraCache[e]||(this._eraCache[e]=[Vr.utc(-40,1,1),Vr.utc(2017,1,1)].map((e=>this.extract(e,t,"era")))),this._eraCache[e]}))}extract(e,t,r){const s=this.dtFormatter(e,t).formatToParts().find((e=>e.type.toLowerCase()===r.toLowerCase()));if(!s)throw new Error(`Invalid extract field ${r}`);return s.value}numberFormatter(e={}){return new He(this._intl,this.fastNumbers,e)}dtFormatter(e,t={}){return new Je(e,this._intl,t)}relFormatter(e={}){return new Ye(this._intl,this.isEnglish(),e)}listFormatter(e={}){return function(e,t={}){var r=JSON.stringify([e,t]);let s=ze[r];return s||(s=new c.ListFormat(e,t),ze[r]=s),s}(this._intl,e)}isEnglish(){return!!~["en","en-us"].indexOf(this.locale.toLowerCase())||new c.DateTimeFormat(this._intl).resolvedOptions().locale.startsWith("en-us")}equals(e){return this.locale===e.locale&&this.numberingSystem===e.numberingSystem&&this.outputCalendar===e.outputCalendar}_supportsFastNumbers(){return(!this.numberingSystem||"latn"===this.numberingSystem)&&("latn"===this.numberingSystem||!this.locale||this.locale.startsWith("en")||"latn"===c.DateTimeFormat(this._intl).resolvedOptions().numberingSystem)}}function Be(e,t){let r="";for(const s of e)s.literal?r+=s.val:r+=t(s.val);return r}const Qe={D:z,DD:q,DDD:U,DDDD:W,t:R,tt:P,ttt:H,tttt:J,T:Y,TT:G,TTT:B,TTTT:Q,f:K,ff:ee,fff:se,ffff:ie,F:X,FF:te,FFF:ne,FFFF:ae};class Ke{constructor(e,t){this._opts=t,this._loc=e,this._systemLoc=void 0}static create(e,t={}){return new Ke(e,t)}static parseFormat(e){let t=null,r="",s=!1;const n=[];for(let a=0;a<e.length;a++){var i=e.charAt(a);"'"===i?(0<r.length&&n.push({literal:s,val:r}),t=null,r="",s=!s):s||i===t?r+=i:(0<r.length&&n.push({literal:!1,val:r}),r=i,t=i)}return 0<r.length&&n.push({literal:s,val:r}),n}static macroTokenToFormatOpts(e){return Qe[e]}formatWithSystemDefault(e,t){void 0===this._systemLoc&&(this._systemLoc=this._loc.redefaultToSystem());return this._systemLoc.dtFormatter(e,Object.assign(Object.assign({},this._opts),t)).format()}formatDateTime(e,t={}){return this._loc.dtFormatter(e,Object.assign(Object.assign({},this._opts),t)).format()}formatDateTimeParts(e,t={}){return this._loc.dtFormatter(e,Object.assign(Object.assign({},this._opts),t)).formatToParts()}resolvedOptions(e,t={}){return this._loc.dtFormatter(e,Object.assign(Object.assign({},this._opts),t)).resolvedOptions()}num(e,t=0){if(this._opts.forceSimple)return v(e,t);const r=Object.assign({},this._opts);return 0<t&&(r.padTo=t),this._loc.numberFormatter(r).format(e)}formatDateTimeFromString(e,t){const r="en"===this._loc.listingMode(),s=this._loc.outputCalendar&&"gregory"!==this._loc.outputCalendar,n=(t,r)=>this._loc.extract(e,t,r),i=t=>e.isOffsetFixed&&0===e.offset&&t.allowZ?"Z":e.isValid?e.zone.formatOffset(e.ts,t.format):"",a=(t,s)=>r?function(e,t){return ce(t)[e.month-1]}(e,t):n(s?{month:t}:{month:t,day:"numeric"},"month"),o=(t,s)=>r?function(e,t){return fe(t)[e.weekday-1]}(e,t):n(s?{weekday:t}:{weekday:t,month:"long",day:"numeric"},"weekday"),u=t=>{var r=Ke.macroTokenToFormatOpts(t);return r?this.formatWithSystemDefault(e,r):t},l=t=>r?function(e,t){return pe(t)[e.year<0?0:1]}(e,t):n({era:t},"era");return Be(Ke.parseFormat(t),(t=>{switch(t){case"S":return this.num(e.millisecond);case"u":case"SSS":return this.num(e.millisecond,3);case"s":return this.num(e.second);case"ss":return this.num(e.second,2);case"uu":return this.num(Math.floor(e.millisecond/10),2);case"uuu":return this.num(Math.floor(e.millisecond/100));case"m":return this.num(e.minute);case"mm":return this.num(e.minute,2);case"h":return this.num(e.hour%12==0?12:e.hour%12);case"hh":return this.num(e.hour%12==0?12:e.hour%12,2);case"H":return this.num(e.hour);case"HH":return this.num(e.hour,2);case"Z":return i({format:"narrow",allowZ:this._opts.allowZ});case"ZZ":return i({format:"short",allowZ:this._opts.allowZ});case"ZZZ":return i({format:"techie",allowZ:this._opts.allowZ});case"ZZZZ":return e.zone.offsetName(e.ts,{format:"short",locale:this._loc.locale})||"";case"ZZZZZ":return e.zone.offsetName(e.ts,{format:"long",locale:this._loc.locale})||"";case"z":return e.zoneName||"";case"a":return r?function(e){return ye[e.hour<12?0:1]}(e):n({hour:"numeric",hourCycle:"h12"},"dayPeriod");case"d":return s?n({day:"numeric"},"day"):this.num(e.day);case"dd":return s?n({day:"2-digit"},"day"):this.num(e.day,2);case"c":case"E":return this.num(e.weekday);case"ccc":return o("short",!0);case"cccc":return o("long",!0);case"ccccc":return o("narrow",!0);case"EEE":return o("short",!1);case"EEEE":return o("long",!1);case"EEEEE":return o("narrow",!1);case"L":return s?n({month:"numeric",day:"numeric"},"month"):this.num(e.month);case"LL":return s?n({month:"2-digit",day:"numeric"},"month"):this.num(e.month,2);case"LLL":return a("short",!0);case"LLLL":return a("long",!0);case"LLLLL":return a("narrow",!0);case"M":return s?n({month:"numeric"},"month"):this.num(e.month);case"MM":return s?n({month:"2-digit"},"month"):this.num(e.month,2);case"MMM":return a("short",!1);case"MMMM":return a("long",!1);case"MMMMM":return a("narrow",!1);case"y":return s?n({year:"numeric"},"year"):this.num(e.year);case"yy":return s?n({year:"2-digit"},"year"):this.num(parseInt(e.year.toString().slice(-2),10),2);case"yyyy":return s?n({year:"numeric"},"year"):this.num(e.year,4);case"yyyyyy":return s?n({year:"numeric"},"year"):this.num(e.year,6);case"G":return l("short");case"GG":return l("long");case"GGGGG":return l("narrow");case"kk":return this.num(parseInt(e.weekYear.toString().slice(-2),10),2);case"kkkk":return this.num(e.weekYear,4);case"W":return this.num(e.weekNumber);case"WW":return this.num(e.weekNumber,2);case"o":return this.num(e.ordinal);case"ooo":return this.num(e.ordinal,3);case"q":return this.num(e.quarter);case"qq":return this.num(e.quarter,2);case"X":return this.num(Math.floor(e.ts/1e3));case"x":return this.num(e.ts);default:return u(t)}}))}formatDurationFromString(e,t){const r=e=>{switch(e[0]){case"S":return"milliseconds";case"s":return"seconds";case"m":return"minutes";case"h":return"hours";case"d":return"days";case"M":return"months";case"y":return"years";default:return}},s=Ke.parseFormat(t),n=s.reduce(((e,{literal:t,val:r})=>t?e:e.concat(r)),[]);var i;e=e.shiftTo(...n.map(r).filter((e=>!!e)));return Be(s,(i=e,e=>{var t=r(e);return t?this.num(i.get(t),e.length):e}))}}function Xe(...e){return e=e.reduce(((e,t)=>e+t.source),""),RegExp(`^${e}$`)}function et(...e){return t=>e.reduce((([e,r,s],n)=>{var[i,n,s]=n(t,s);return[Object.assign(Object.assign({},e),i),n||r,s]}),[{},null,1]).slice(0,2)}function tt(e,...t){if(null==e)return[null,null];for(var[r,s]of t)if(r=r.exec(e))return s(r);return[null,null]}function rt(...e){return(t,r)=>{const s={};let n;for(n=0;n<e.length;n++)s[e[n]]=p(t[r+n]);return[s,null,r+n]}}var st=/(?:(Z)|([+-]\d\d)(?::?(\d\d))?)/,nt=/(\d\d)(?::?(\d\d)(?::?(\d\d)(?:[.,](\d{1,30}))?)?)?/,it=RegExp(`${nt.source}(?:${st.source}?(?:\\[(${F.source})\\])?)?`),at=RegExp(`(?:T${it.source})?`),ot=rt("weekYear","weekNumber","weekday"),ut=rt("year","ordinal");st=RegExp(`${nt.source} ?(?:${st.source}|(${F.source}))?`),F=RegExp(`(?: ${st.source})?`);function lt(e,t,r){return d(e[t])?r:p(e[t])}function ct(e,t){return[{hour:lt(e,t,0),minute:lt(e,t+1,0),second:lt(e,t+2,0),millisecond:O(e[t+3])},null,t+4]}function ht(e,t){var r=!e[t]&&!e[t+1];e=j(e[t+1],e[t+2]);return[{},r?null:Ne.instance(e),t+3]}function dt(e,t){return[{},e[t]?ke.create(e[t]):null,t+1]}const mt=RegExp(`^T?${nt.source}$`),ft=/^-?P(?:(?:(-?\d{1,20}(?:\.\d{1,20})?)Y)?(?:(-?\d{1,20}(?:\.\d{1,20})?)M)?(?:(-?\d{1,20}(?:\.\d{1,20})?)W)?(?:(-?\d{1,20}(?:\.\d{1,20})?)D)?(?:T(?:(-?\d{1,20}(?:\.\d{1,20})?)H)?(?:(-?\d{1,20}(?:\.\d{1,20})?)M)?(?:(-?\d{1,20})(?:[.,](-?\d{1,20}))?S)?)?)$/;function yt(e){const[t,r,s,n,i,a,o,u,l]=e,c=t.startsWith("-");var h=!!u&&u.startsWith("-");e=(e,t=!1)=>"number"==typeof e&&(t||e&&c)?-e:e;return[{years:e(w(r)),months:e(w(s)),weeks:e(w(n)),days:e(w(i)),hours:e(w(a)),minutes:e(w(o)),seconds:e(w(u),"-0"===u),milliseconds:e(O(l),h)}]}const _t={GMT:0,EDT:-240,EST:-300,CDT:-300,CST:-360,MDT:-360,MST:-420,PDT:-420,PST:-480};function gt(e,t,r,s,n,i,a){let o;return e&&(o=3<e.length?he.indexOf(e)+1:de.indexOf(e)+1),{year:2===t.length?D(p(t)):p(t),month:ue.indexOf(r)+1,day:p(s),hour:p(n),minute:p(i),second:p(a),weekday:o}}const vt=/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|(?:([+-]\d\d)(\d\d)))$/;function pt(e){var[,t,r,s,n,i,a,o,u,l,c,e]=e,o=gt(t,n,s,r,i,a,o);let h;return h=u?_t[u]:l?0:j(c,e),[o,new Ne(h)]}const wt=/^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d\d) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d\d):(\d\d):(\d\d) GMT$/,Ot=/^(Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\d\d)-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d\d) (\d\d):(\d\d):(\d\d) GMT$/,bt=/^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( \d|\d\d) (\d\d):(\d\d):(\d\d) (\d{4})$/;function Tt(e){var[,t,r,s,n,i,a,e]=e;return[gt(t,n,s,r,i,a,e),Ne.utcInstance]}function St(e){var[,t,r,s,n,i,a,e]=e;return[gt(t,e,r,s,n,i,a),Ne.utcInstance]}const kt=Xe(/([+-]\d{6}|\d{4})(?:-?(\d\d)(?:-?(\d\d))?)?/,at),Mt=Xe(/(\d{4})-?W(\d\d)(?:-?(\d))?/,at),Nt=Xe(/(\d{4})-?(\d{3})/,at),Dt=Xe(it),Et=et((function(e,t){return lt(e,t,0),lt(e,t+1,1),lt(e,t+2,1),1}),ct,ht,dt),jt=et(ot,ct,ht,dt),xt=et(ut,ct,ht,dt),It=et(ct,ht,dt),Vt=Xe(/(\d{4})-(\d\d)-(\d\d)/,F),Ct=Xe(st),Ft=et(ct,ht,dt);class $t{constructor(e,t){this.reason=e,this.explanation=t,this._formattedExplanation="",t&&(this._formattedExplanation=`: ${t}`)}toMessage(){return`${this.reason}${this._formattedExplanation}`}}ut={weeks:{days:7,hours:168,minutes:10080,seconds:604800,milliseconds:6048e5},days:{hours:24,minutes:1440,seconds:86400,milliseconds:864e5},hours:{minutes:60,seconds:3600,milliseconds:36e5},minutes:{seconds:60,milliseconds:6e4},seconds:{milliseconds:1e3}};const Zt=Object.assign({years:{quarters:4,months:12,weeks:52,days:365,hours:8760,minutes:525600,seconds:31536e3,milliseconds:31536e6},quarters:{months:3,weeks:13,days:91,hours:2184,minutes:131040,seconds:7862400,milliseconds:78624e5},months:{weeks:4,days:30,hours:720,minutes:43200,seconds:2592e3,milliseconds:2592e6}},ut);F=365.2425,st=30.436875;const Lt=Object.assign({years:{quarters:4,months:12,weeks:F/7,days:F,hours:24*F,minutes:525949.2,seconds:525949.2*60,milliseconds:525949.2*60*1e3},quarters:{months:3,weeks:F/28,days:F/4,hours:24*F/4,minutes:131487.3,seconds:525949.2*60/4,milliseconds:7889237999.999999},months:{weeks:st/7,days:st,hours:24*st,minutes:43829.1,seconds:2629746,milliseconds:2629746e3}},ut);function zt(e,t,r,s,n){var i=e[n][r],a=t[r]/i;a=Math.sign(a)!==Math.sign(s[n])&&0!==s[n]&&Math.abs(a)<=1?(e=a)<0?Math.floor(e):Math.ceil(e):Math.trunc(a);s[n]=s[n]+a,t[r]=t[r]-a*i}class qt{constructor(e){var t="longterm"===e.conversionAccuracy||!1;this._values=e.values||{},this._loc=e.loc||Ge.create(),this._conversionAccuracy=t?"longterm":"casual",this._invalid=e.invalid||null,this._matrix=t?Lt:Zt,this._isLuxonDuration=!0}get conversionAccuracy(){return this._conversionAccuracy}get invalidExplanation(){return this._invalid?this._invalid.explanation:null}get invalidReason(){return this._invalid?this._invalid.reason:null}get isValid(){return null===this._invalid}get locale(){return this.isValid?this._loc.locale:void 0}get numberingSystem(){return this.isValid?this._loc.numberingSystem:void 0}static fromISOTime(e,t={}){var[r]=tt(e,[mt,et(ct)]);return r?qt.fromObject(r,t):qt.invalid("unparsable",`the input "${e}" can't be parsed as ISO 8601`)}static fromMillis(e,t={}){return qt.fromObject({milliseconds:e},t)}static fromObject(e,t={}){if(null==e||"object"!=typeof e)throw new u("Duration.fromObject: argument expected to be an object, got "+(null===e?"null":typeof e));return new qt({values:I(e,qt.normalizeUnit),loc:Ge.fromObject(t),conversionAccuracy:t.conversionAccuracy})}static fromDurationLike(e){if(m(e))return qt.fromMillis(e);if(qt.isDuration(e))return e;if("object"==typeof e)return qt.fromObject(e);throw new u(`Unknown duration argument ${e} of type ${typeof e}`)}static fromISO(e,t){var[r]=tt(e,[ft,yt]);return r?qt.fromObject(r,t):qt.invalid("unparsable",`the input "${e}" can't be parsed as ISO 8601`)}static isDuration(e){return!!e&&e._isLuxonDuration||!1}static invalid(e,t){if(!e)throw new u("need to specify a reason the Duration is invalid");if(t=e instanceof $t?e:new $t(e,t),Le.throwOnInvalid)throw new s(t);return new qt({invalid:t})}static normalizeUnit(e){var t={year:"years",years:"years",quarter:"quarters",quarters:"quarters",month:"months",months:"months",week:"weeks",weeks:"weeks",day:"days",days:"days",hour:"hours",hours:"hours",minute:"minutes",minutes:"minutes",second:"seconds",seconds:"seconds",millisecond:"milliseconds",milliseconds:"milliseconds"}[e];if(!t)throw new i(e);return t}getMaxUnit(e=!1){const t=e?L:$,r=this.shiftTo(...t).toObject();return t.find((e=>0<(r[e]||0)))||Z[0]}toFormat(e,t={floor:!0}){return t=Object.assign(Object.assign({},t),{floor:!1!==t.round&&!1!==t.floor}),this.isValid?Ke.create(this._loc,t).formatDurationFromString(this,e):"Invalid Duration"}toHuman(e={}){var t=this.getMaxUnit(!0);const r=e.onlyHumanUnits?L:$,s=this.shiftTo(...r.slice(r.indexOf(t))).toObject();var n=r.map((t=>{var r=s[t];return d(r)||0===r?null:this._loc.numberFormatter(Object.assign(Object.assign({style:"unit",unitDisplay:"long"},e),{unit:t.slice(0,-1)})).format(r)})).filter((e=>e));t=Object.assign({type:"conjunction",style:e.listStyle||"narrow"},e);return this._loc.listFormatter(t).format(n)}toObject(){return this.isValid?Object.assign({},this._values):{}}toISO(){if(!this.isValid)return null;let e="P";return 0!==this.years&&(e+=this.years+"Y"),0===this.months&&0===this.quarters||(e+=this.months+3*this.quarters+"M"),0!==this.weeks&&(e+=this.weeks+"W"),0!==this.days&&(e+=this.days+"D"),0===this.hours&&0===this.minutes&&0===this.seconds&&0===this.milliseconds||(e+="T"),0!==this.hours&&(e+=this.hours+"H"),0!==this.minutes&&(e+=this.minutes+"M"),0===this.seconds&&0===this.milliseconds||(e+=b(this.seconds+this.milliseconds/1e3,3)+"S"),"P"===e&&(e+="T0S"),e}toISOTime(e={}){if(!this.isValid)return null;var t=this.toMillis();if(t<0||864e5<=t)return null;e=Object.assign({suppressMilliseconds:!1,suppressSeconds:!1,includePrefix:!1,format:"extended"},e);const r=this.shiftTo("hours","minutes","seconds","milliseconds");let s="basic"===e.format?"hhmm":"hh:mm";e.suppressSeconds&&0===r.seconds&&0===r.milliseconds||(s+="basic"===e.format?"ss":":ss",e.suppressMilliseconds&&0===r.milliseconds||(s+=".SSS"));let n=r.toFormat(s);return e.includePrefix&&(n="T"+n),n}toJSON(){return this.toISO()}toString(){return this.toISO()}toMillis(){return this.as("milliseconds")}valueOf(){return this.toMillis()}plus(e){if(!this.isValid)return this;const t=qt.fromDurationLike(e),r={};return $.forEach((e=>{void 0===t._values[e]&&void 0===this._values[e]||(r[e]=t.get(e)+this.get(e))})),this._clone(this,{_values:r},!0)}minus(e){if(!this.isValid)return this;const t=qt.fromDurationLike(e);return this.plus(t.negate())}mapUnits(e){if(!this.isValid)return this;const t={};return Object.keys(this._values).forEach((r=>{t[r]=x(e(this._values[r],r))})),this._clone(this,{_values:t},!0)}get(e){return this[qt.normalizeUnit(e)]}set(e){return this.isValid?(e=Object.assign(Object.assign({},this._values),I(e,qt.normalizeUnit)),this._clone(this,{_values:e})):this}reconfigure({locale:e,numberingSystem:t,conversionAccuracy:r}={}){return r={values:this._values,loc:this._loc.clone({locale:e,numberingSystem:t}),conversionAccuracy:r||this._conversionAccuracy},new qt(r)}as(e){return this.shiftTo(e).get(e)}normalize(){if(!this.isValid)return this;var e=this.toObject();return function(e,t){let r;Z.forEach((s=>{d(t[s])||(r&&zt(e,t,r,t,s),r=s)}))}(this._matrix,e),this._clone(this,{_values:e},!0)}rescale(){if(!this.isValid)return this;var e=([e={}]=[this.normalize().shiftToAll().toObject()],Object.entries(e).reduce(((e,[t,r])=>(0!==r&&(e[t]=r),e)),{}));return this._clone(this,{_values:e},!0)}shiftTo(...e){if(!this.isValid||0===e.length)return this;e=e.map((e=>qt.normalizeUnit(e)));const t={},r={},s=this.toObject();let n;return $.forEach((i=>{if(0<=e.indexOf(i)){n=i;let e=0;Object.keys(r).forEach((t=>{e+=this._matrix[t][i]*r[t],r[t]=0})),m(s[i])&&(e+=s[i]);var a=Math.trunc(e);t[i]=a,r[i]=(1e3*e-1e3*a)/1e3,Object.keys(s).forEach((e=>{$.indexOf(e)>$.indexOf(i)&&zt(this._matrix,s,e,t,i)}))}else m(s[i])&&(r[i]=s[i])})),Object.keys(r).forEach((e=>{var s=r[e];0!==s&&(t[n]+=e===n?s:s/this._matrix[n][e])})),this._clone(this,{_values:t},!0).normalize()}shiftToAll(){return this.isValid?this.shiftTo("years","months","weeks","days","hours","minutes","seconds","milliseconds"):this}negate(){if(!this.isValid)return this;const e={};return Object.keys(this._values).forEach((t=>{e[t]=0===this._values[t]?0:-this._values[t]})),this._clone(this,{_values:e},!0)}get years(){return this.isValid?this._values.years||0:NaN}get quarters(){return this.isValid?this._values.quarters||0:NaN}get months(){return this.isValid?this._values.months||0:NaN}get weeks(){return this.isValid?this._values.weeks||0:NaN}get days(){return this.isValid?this._values.days||0:NaN}get hours(){return this.isValid?this._values.hours||0:NaN}get minutes(){return this.isValid?this._values.minutes||0:NaN}get seconds(){return this.isValid?this._values.seconds||0:NaN}get milliseconds(){return this.isValid?this._values.milliseconds||0:NaN}equals(e){if(!this._loc.equals(e._loc))return!1;for(const s of $)if(t=this._values[s],r=e._values[s],!(void 0===t||0===t?void 0===r||0===r:t===r))return!1;var t,r;return!0}_clone(e,t,r=!0){return e={values:r?t._values:Object.assign(Object.assign({},e._values),t._values||{}),loc:e._loc.clone({locale:null===(r=t._loc)||void 0===r?void 0:r.locale}),conversionAccuracy:t.conversionAccuracy||e.conversionAccuracy},new qt(e)}}const At="Invalid Interval";function Ut(e){if(Vr.isDateTime(e))return e;if(e&&e.valueOf&&m(e.valueOf()))return Vr.fromJSDate(e);if(e&&"object"==typeof e)return Vr.fromObject(e);throw new u(`Unknown datetime argument: ${e}, of type ${typeof e}`)}class Wt{constructor(e){this._s=e.start,this._e=e.end,this._invalid=e.invalid||null,this._isLuxonInterval=!0}get invalidReason(){return this._invalid?this._invalid.reason:null}get isValid(){return null===this.invalidReason}get start(){return this.isValid?this._s:null}get end(){return this.isValid?this._e:null}static fromDateTimes(e,t){var r=Ut(e),s=Ut(t);return e=s,((t=r)&&t.isValid?e&&e.isValid?e<t?Wt.invalid("end before start",`The end of an interval must be after its start, but you had start=${t.toISO()} and end=${e.toISO()}`):void 0:Wt.invalid("missing or invalid end"):Wt.invalid("missing or invalid start"))||new Wt({start:r,end:s})}static after(e,t){const r=qt.fromDurationLike(t),s=Ut(e);return new Wt({start:s,end:s?s.plus(r):void 0})}static before(e,t){const r=qt.fromDurationLike(t),s=Ut(e);return new Wt({start:s?s.minus(r):void 0,end:s})}static fromISO(e,t={}){var[r,s]=(e||"").split("/",2);if(r&&s){let e,i,a,o;try{e=Vr.fromISO(r,t),i=e.isValid}catch(s){i=!1}try{a=Vr.fromISO(s,t),o=a.isValid}catch(s){o=!1}if(i&&o)return Wt.fromDateTimes(e,a);if(i){var n=qt.fromISO(s,t);if(n.isValid)return Wt.after(e,n)}else if(o&&(t=qt.fromISO(r,t)).isValid)return Wt.before(a,t)}return Wt.invalid("unparsable",`the input "${e}" can't be parsed as ISO 8601`)}static invalid(e,t){if(!e)throw new u("need to specify a reason the Interval is invalid");if(t=e instanceof $t?e:new $t(e,t),Le.throwOnInvalid)throw new n(t);return new Wt({invalid:t})}static isInterval(e){return!!e&&e._isLuxonInterval||!1}static merge(e){const[t,r]=e.sort(((e,t)=>e._s.valueOf()-t._s.valueOf())).reduce((([e,t],r)=>t?t.overlaps(r)||t.abutsStart(r)?[e,t.union(r)]:[e.concat([t]),r]:[e,r]),[[],null]);return r&&t.push(r),t}static xor(e){let t=null,r=0;const s=[],n=e.map((e=>[{time:e._s,type:"s"},{time:e._e,type:"e"}])),i=Array.prototype.concat(...n).sort(((e,t)=>+e.time-+t.time));for(const e of i)r+="s"===e.type?1:-1,t=1===r?e.time:(t&&t.valueOf()!==e.time.valueOf()&&s.push(Wt.fromDateTimes(t,e.time)),null);return Wt.merge(s)}length(e="milliseconds"){return this.toDuration(e).get(e)}count(e="milliseconds"){if(!this.isValid)return NaN;var t=this.start.startOf(e);const r=this.end.startOf(e);return Math.floor(r.diff(t,e).get(e))+1}hasSame(e){return!!this.isValid&&(this.isEmpty()||this._e.minus(1).hasSame(this._s,e))}isEmpty(){return this._s.valueOf()===this._e.valueOf()}isAfter(e){return!!this.isValid&&this._s>e}isBefore(e){return!!this.isValid&&this._e<=e}contains(e){return this._s<=e&&this._e>e}set({start:e,end:t}={}){return this.isValid?Wt.fromDateTimes(e||this._s,t||this._e):this}splitAt(...e){var t=e.map(Ut).filter((e=>this.contains(e))).sort();const r=[];let s=this._s,n=0;for(;s<this._e;){var i=+(i=t[n]||this._e)>+this._e?this._e:i;r.push(Wt.fromDateTimes(s,i)),s=i,n+=1}return r}splitBy(e){const t=qt.fromDurationLike(e);if(!this.isValid||!t.isValid||0===t.as("milliseconds"))return[];let r,s=this._s,n=1;const i=[];for(;s<this._e;){var a=this.start.plus(t.mapUnits((e=>e*n)));r=+a>+this._e?this._e:a,i.push(Wt.fromDateTimes(s,r)),s=r,n+=1}return i}divideEqually(e){return this.isValid?this.splitBy({milliseconds:this.length()/e}).slice(0,e):[]}overlaps(e){return this._e>e._s&&this._s<e._e}abutsStart(e){return+this._e==+e._s}abutsEnd(e){return+e._e==+this._s}engulfs(e){return!!this.isValid&&this._s<=e._s&&this._e>=e._e}equals(e){return!(!this.isValid||!e.isValid)&&this._s.equals(e._s)&&this._e.equals(e._e)}intersection(e){if(!this.isValid)return this;var t=(this._s>e._s?this:e)._s;return(e=(this._e<e._e?this:e)._e)<=t?null:Wt.fromDateTimes(t,e)}union(e){if(!this.isValid)return this;var t=(this._s<e._s?this:e)._s;e=(this._e>e._e?this:e)._e;return Wt.fromDateTimes(t,e)}difference(...e){return Wt.xor([this].concat(e)).map((e=>this.intersection(e))).filter((e=>e&&!e.isEmpty()))}toString(){return this.isValid?`[${this._s.toISO()} – ${this._e.toISO()})`:At}toISO(e={}){return this.isValid?`${this._s.toISO(e)}/${this._e.toISO(e)}`:At}toISODate(){return this.isValid?`${this._s.toISODate()}/${this._e.toISODate()}`:At}toISOTime(e={}){return this.isValid?`${this._s.toISOTime(e)}/${this._e.toISOTime(e)}`:At}toFormat(e,t={separator:" – "}){return this.isValid?`${this._s.toFormat(e)}${t.separator}${this._e.toFormat(e)}`:At}toDuration(e="milliseconds",t={}){return this.isValid?this._e.diff(this._s,e,t):qt.invalid(this._invalid.reason)}mapEndpoints(e){return Wt.fromDateTimes(e(this._s),e(this._e))}}class Rt{static hasDST(e=Le.defaultZone){const t=Vr.now().setZone(e).set({month:12});return!e.isUniversal&&t.offset!==t.set({month:6}).offset}static isValidIANAZone(e){return ke.isValidZone(e)}static normalizeZone(e){return Ee(e,Le.defaultZone)}static months(e="long",{locale:t,locObj:r,numberingSystem:s,outputCalendar:n="gregory"}={}){return(r||Ge.create(t,s,n)).months(e)}static monthsFormat(e="long",{locale:t,locObj:r,numberingSystem:s,outputCalendar:n="gregory"}={}){return(r||Ge.create(t,s,n)).months(e,!0)}static weekdays(e="long",{locale:t,locObj:r,numberingSystem:s}={}){return(r||Ge.create(t,s)).weekdays(e)}static weekdaysFormat(e="long",{locale:t,locObj:r,numberingSystem:s}={}){return(r||Ge.create(t,s)).weekdays(e,!0)}static meridiems({locale:e}={}){return Ge.create(e).meridiems()}static eras(e="short",{locale:t}={}){return Ge.create(t,void 0,"gregory").eras(e)}static features(){return{relative:y()}}}function Pt(e,t){var r=e=>e.toUTC(0,{keepLocalTime:!0}).startOf("days").valueOf();e=r(t)-r(e);return Math.floor(qt.fromMillis(e).as("days"))}const Ht={arab:"[٠-٩]",arabext:"[۰-۹]",bali:"[᭐-᭙]",beng:"[০-৯]",deva:"[०-९]",fullwide:"[０-９]",gujr:"[૦-૯]",hanidec:"[〇|一|二|三|四|五|六|七|八|九]",khmr:"[០-៩]",knda:"[೦-೯]",laoo:"[໐-໙]",limb:"[᥆-᥏]",mlym:"[൦-൯]",mong:"[᠐-᠙]",mymr:"[၀-၉]",orya:"[୦-୯]",tamldec:"[௦-௯]",telu:"[౦-౯]",thai:"[๐-๙]",tibt:"[༠-༩]",latn:"\\d"},Jt={arab:[1632,1641],arabext:[1776,1785],bali:[6992,7001],beng:[2534,2543],deva:[2406,2415],fullwide:[65296,65303],gujr:[2790,2799],khmr:[6112,6121],knda:[3302,3311],laoo:[3792,3801],limb:[6470,6479],mlym:[3430,3439],mong:[6160,6169],mymr:[4160,4169],orya:[2918,2927],tamldec:[3046,3055],telu:[3174,3183],thai:[3664,3673],tibt:[3872,3881]},Yt=Ht.hanidec.replace(/[\[|\]]/g,"").split("");function Gt(e,t=""){return new RegExp(`${Ht[e.numberingSystem||"latn"]}${t}`)}function Bt(e,t=(e=>e)){return{regex:e,deser:([e])=>t(function(e){var t=parseInt(e,10);if(!isNaN(t))return t;let r="";for(let t=0;t<e.length;t++){var s=e.charCodeAt(t);if(-1!==e[t].search(Ht.hanidec))r+=Yt.indexOf(e[t]);else for(const e in Jt){var[n,i]=Jt[e];if(n<=s&&s<=i){r+=s-n;break}}}return parseInt(r,10)}(e))}}const Qt=`[ ${String.fromCharCode(160)}]`,Kt=new RegExp(Qt,"g");function Xt(e){return e.replace(/\./g,"\\.?").replace(Kt,Qt)}function er(e){return e.replace(/\./g,"").replace(Kt," ").toLowerCase()}function tr(e,t){return{regex:RegExp(e.map(Xt).join("|")),deser:([r])=>e.findIndex((e=>er(r)===er(e)))+t}}function rr(e,t){return{regex:e,deser:([,e,t])=>j(e,t),groups:t}}function sr(e){return{regex:e,deser:([e])=>e}}const nr={year:{"2-digit":"yy",numeric:"yyyyy"},month:{numeric:"M","2-digit":"MM",short:"MMM",long:"MMMM"},day:{numeric:"d","2-digit":"dd"},weekday:{short:"EEE",long:"EEEE"},hour:{numeric:"h","2-digit":"hh"},minute:{numeric:"m","2-digit":"mm"},second:{numeric:"s","2-digit":"ss"}};let ir;function ar(e){return!!e&&!!e.invalidReason}function or(e,t,r){const s=(m=Ke.parseFormat(r),n=e,Array.prototype.concat(...m.map((e=>function(e,t){if(e.literal)return e;const r=Ke.macroTokenToFormatOpts(e.val);if(!r)return e;const s=Ke.create(t,r).formatDateTimeParts((void 0===ir&&(ir=Vr.fromMillis(1555555555555)),ir)).map((e=>function(e,t){var{type:r,value:e}=e;return"literal"===r?{literal:!0,val:e}:"dayPeriod"===r?{literal:!1,val:"a"}:void 0!==(e=nr[r])&&(r=t[r])&&void 0!==(r=e[r])?{literal:!1,val:r}:void 0}(e,r)));return 0<=s.indexOf(void 0)?e:s}(e,n)))));var n;const i=s.map((t=>function(e,t){const r=Gt(t),s=Gt(t,"{2}"),n=Gt(t,"{3}"),i=Gt(t,"{4}"),a=Gt(t,"{6}"),o=Gt(t,"{1,2}"),u=Gt(t,"{1,3}"),l=Gt(t,"{1,6}"),c=Gt(t,"{1,9}"),h=Gt(t,"{2,4}"),d=Gt(t,"{4,6}"),m=e=>({regex:RegExp(e.val.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&")),deser:([e])=>e,literal:!0});var f=(f=>{if(e.literal)return m(f);switch(f.val){case"G":return tr(t.eras("short"),0);case"GG":return tr(t.eras("long"),0);case"y":return Bt(l);case"yy":case"kk":return Bt(h,D);case"yyyy":case"kkkk":return Bt(i);case"yyyyy":return Bt(d);case"yyyyyy":return Bt(a);case"M":case"L":case"d":case"H":case"h":case"m":case"q":case"s":case"W":return Bt(o);case"MM":case"LL":case"dd":case"HH":case"hh":case"mm":case"qq":case"ss":case"WW":return Bt(s);case"MMM":return tr(t.months("short",!0),1);case"MMMM":return tr(t.months("long",!0),1);case"LLL":return tr(t.months("short",!1),1);case"LLLL":return tr(t.months("long",!1),1);case"o":case"S":return Bt(u);case"ooo":case"SSS":return Bt(n);case"u":return sr(c);case"a":return tr(t.meridiems(),0);case"E":case"c":return Bt(r);case"EEE":return tr(t.weekdays("short",!1),1);case"EEEE":return tr(t.weekdays("long",!1),1);case"ccc":return tr(t.weekdays("short",!0),1);case"cccc":return tr(t.weekdays("long",!0),1);case"Z":case"ZZ":return rr(new RegExp(`([+-]${o.source})(?::(${s.source}))?`),2);case"ZZZ":return rr(new RegExp(`([+-]${o.source})(${s.source})?`),2);case"z":return sr(/[a-z_+-/]{1,256}?/i);default:return m(f)}})(e)||{invalidReason:"missing Intl.DateTimeFormat.formatToParts support"};return Object.assign(Object.assign({},f),{token:e})}(t,e)));var a;if(a=i.find(ar))return{input:t,tokens:s,invalidReason:a.invalidReason};var u=`^${i.map((e=>e.regex)).reduce(((e,t)=>`${e}(${t.source})`),"")}$`,l=RegExp(u,"i"),[c,r]=function(e,t,r){const s=t.exec(e),n={};if(null!==s){let e=1;r.forEach((t=>{var r=t.groups?t.groups+1:1;t.literal||(n[t.token.val[0]]=t.deser(s.slice(e,e+r))),e+=r}))}return[s,n]}(t,l,i),[m,a,u]=r?function(e){let t,r=null;return h(e.z)&&(r=ke.create(e.z)),h(e.Z)&&(r=r||new Ne(+e.Z),t=+e.Z),d(e.q)||(e.M=3*(e.q-1)+1),d(e.h)||(e.h<12&&1===e.a?e.h=e.h+12:12===e.h&&0===e.a&&(e.h=0)),0===e.G&&e.y&&(e.y=-e.y),d(e.u)||(e.S=O(e.u)||0),[Object.keys(e).reduce(((t,r)=>{var s=(e=>{switch(e){case"S":return"millisecond";case"s":return"second";case"m":return"minute";case"h":case"H":return"hour";case"d":return"day";case"o":return"ordinal";case"L":case"M":return"month";case"y":return"year";case"E":case"c":return"weekday";case"W":return"weekNumber";case"k":return"weekYear";case"q":return"quarter";default:return null}})(r);return s&&(t[s]=e[r]),t}),{}),r,t]}(r):[null,null,void 0];if("a"in r&&"H"in r)throw new o("Can't include meridiem when specifying 24-hour format");return{input:t,tokens:s,regex:l,rawMatches:c,matches:r,result:m,zone:a,specificOffset:u}}const ur=[0,31,59,90,120,151,181,212,243,273,304,334],lr=[0,31,60,91,121,152,182,213,244,274,305,335];function cr(e,t){return new $t("unit out of range",`you specified ${t} (of type ${typeof t}) as a ${e}, which is invalid`)}function hr(e,t,r){const s=new Date(Date.UTC(e,t-1,r));return e<100&&0<=e&&s.setUTCFullYear(s.getUTCFullYear()-1900),0===(e=s.getUTCDay())?7:e}function dr(e,t,r){return r+(T(e)?lr:ur)[t-1]}function mr(e,t){const r=T(e)?lr:ur;return{month:(e=r.findIndex((e=>e<t)))+1,day:t-r[e]}}function fr(e){var{year:t,month:r,day:s}=e,n=dr(t,r,s),s=hr(t,r,s);let i,a=Math.floor((n-s+10)/7);return a<1?(i=t-1,a=N(i)):a>N(t)?(i=t+1,a=1):i=t,Object.assign({weekYear:i,weekNumber:a,weekday:s},C(e))}function yr(e){var{weekYear:t,weekNumber:r,weekday:s}=e,n=hr(t,1,4),i=S(t);let a,o=7*r+s-n-3;o<1?(a=t-1,o+=S(a)):o>i?(a=t+1,o-=S(t)):a=t;var{month:i,day:t}=mr(a,o);return Object.assign({year:a,month:i,day:t},C(e))}function _r(e){var{year:t,month:r,day:s}=e,s=dr(t,r,s);return Object.assign({year:t,ordinal:s},C(e))}function gr(e){var{year:t,ordinal:r}=e,{month:s,day:r}=mr(t,r);return Object.assign({year:t,month:s,day:r},C(e))}function vr(e){var t=f(e.year),r=g(e.month,1,12),s=g(e.day,1,k(e.year,e.month));return t?r?!s&&cr("day",e.day):cr("month",e.month):cr("year",e.year)}function pr(e){var{hour:t,minute:r,second:s,millisecond:n}=e,i=g(t,0,23)||24===t&&0===r&&0===s&&0===n,a=g(r,0,59),o=g(s,0,59);e=g(n,0,999);return i?a?o?!e&&cr("millisecond",n):cr("second",s):cr("minute",r):cr("hour",t)}const wr="Invalid DateTime";function Or(e,t,r){let s=e-60*t*1e3;var n=r.offset(s);return t===n?[s,t]:(s-=60*(n-t)*1e3,n===(r=r.offset(s))?[s,n]:[e-60*Math.min(n,r)*1e3,Math.max(n,r)])}function br(e,t){const r=new Date(e+=60*t*1e3);return{year:r.getUTCFullYear(),month:r.getUTCMonth()+1,day:r.getUTCDate(),hour:r.getUTCHours(),minute:r.getUTCMinutes(),second:r.getUTCSeconds(),millisecond:r.getUTCMilliseconds()}}function Tr(e,t,r){return Or(M(e),t,r)}function Sr(e,t,r,s,n,i){var{setZone:a,zone:o}=r;if(e&&0<Object.keys(e).length){t=t||o;const s=Vr.fromObject(e,Object.assign(Object.assign({},r),{zone:t,specificOffset:i}));return a?s:s.setZone(o)}return Vr.invalid(new $t("unparsable",`the input "${n}" can't be parsed as ${s}`))}function kr(e,t,r=!0){return e.isValid?Ke.create(Ge.create("en-US"),{allowZ:r,forceSimple:!0}).formatDateTimeFromString(e,t):null}const Mr={year:0,month:1,day:1,hour:0,minute:0,second:0,millisecond:0},Nr={weekNumber:1,weekday:1,hour:0,minute:0,second:0,millisecond:0},Dr={ordinal:1,hour:0,minute:0,second:0,millisecond:0},Er=["year","month","day","hour","minute","second","millisecond"],jr=["weekYear","weekNumber","weekday","hour","minute","second","millisecond"],xr=["year","ordinal","hour","minute","second","millisecond"];function Ir(e){var t={year:"year",years:"year",quarter:"quarter",quarters:"quarter",month:"month",months:"month",day:"day",days:"day",hour:"hour",hours:"hour",minute:"minute",minutes:"minute",second:"second",seconds:"second",millisecond:"millisecond",milliseconds:"millisecond",weekday:"weekday",weekdays:"weekday",weeknumber:"weekNumber",weeksnumber:"weekNumber",weeknumbers:"weekNumber",weekyear:"weekYear",weekyears:"weekYear",ordinal:"ordinal"}[e.toLowerCase()];if(!t)throw new i(e);return t}class Vr{constructor(e){const t=e.zone||Le.defaultZone;let r,s,n=e.invalid||(Number.isNaN(e.ts)?new $t("invalid timestamp"):null)||(t.isValid?null:Vr._unsupportedZone(t));var i;this._ts=d(e.ts)?Le.now():e.ts,n||(e.old&&e.old.ts===this._ts&&e.old.zone.equals(t)?[s,r]=[e.old.c,e.old.o]:(i=t.offset(this._ts),s=br(this._ts,i),n=Number.isNaN(s.year)?new $t("invalid input"):null,s=n?void 0:s,r=n?void 0:i)),this._zone=t,this._loc=e.loc||Ge.create(),this._invalid=n,this._weekData=null,this._c=s,this._o=r,this._isLuxonDateTime=!0}get invalidExplanation(){return this._invalid?this._invalid.explanation:void 0}get invalidReason(){return this._invalid?this._invalid.reason:void 0}get isValid(){return null===this._invalid}get locale(){return this.isValid?this._loc.locale:void 0}get numberingSystem(){return this.isValid?this._loc.numberingSystem:void 0}get outputCalendar(){return this.isValid?this._loc.outputCalendar:void 0}get zone(){return this._zone}get zoneName(){return this.isValid?this.zone.name:null}get year(){return this.isValid?this._c.year:NaN}get quarter(){return this.isValid?Math.ceil(this._c.month/3):NaN}get month(){return this.isValid?this._c.month:NaN}get day(){return this.isValid?this._c.day:NaN}get hour(){return this.isValid?this._c.hour:NaN}get minute(){return this.isValid?this._c.minute:NaN}get second(){return this.isValid?this._c.second:NaN}get millisecond(){return this.isValid?this._c.millisecond:NaN}get weekYear(){return this.isValid?this._possiblyCachedWeekData(this).weekYear:NaN}get weekNumber(){return this.isValid?this._possiblyCachedWeekData(this).weekNumber:NaN}get weekday(){return this.isValid?this._possiblyCachedWeekData(this).weekday:NaN}get ordinal(){return this.isValid?_r(this._c).ordinal:NaN}get monthShort(){return this.isValid?Rt.months("short",{locObj:this._loc})[this.month-1]:null}get monthLong(){return this.isValid?Rt.months("long",{locObj:this._loc})[this.month-1]:null}get weekdayShort(){return this.isValid?Rt.weekdays("short",{locObj:this._loc})[this.weekday-1]:null}get weekdayLong(){return this.isValid?Rt.weekdays("long",{locObj:this._loc})[this.weekday-1]:null}get offset(){return this.isValid?+this._o:NaN}get offsetNameShort(){return this.isValid?this.zone.offsetName(this._ts,{format:"short",locale:this.locale}):null}get offsetNameLong(){return this.isValid?this.zone.offsetName(this._ts,{format:"long",locale:this.locale}):null}get isOffsetFixed(){return this.isValid?this.zone.isUniversal:null}get isInDST(){return!this.isOffsetFixed&&(this.offset>this.set({month:1,day:1}).offset||this.offset>this.set({month:5}).offset)}get isInLeapYear(){return T(this.year)}get daysInMonth(){return k(this.year,this.month)}get daysInYear(){return this.isValid?S(this.year):NaN}get weeksInWeekYear(){return this.isValid?N(this.weekYear):NaN}get ts(){return this._ts}static now(){return new Vr({})}static local(...e){var[t,r]=this._lastOpts(e),[s,n,i,a,o,e,r]=r;return Vr._quickDT({year:s,month:n,day:i,hour:a,minute:o,second:e,millisecond:r},t)}static utc(...e){const[t,r]=this._lastOpts(e);var[s,n,i,a,o,u,e]=r;return t.zone=Ne.utcInstance,this._quickDT({year:s,month:n,day:i,hour:a,minute:o,second:u,millisecond:e},t)}static fromJSDate(e,t={}){var r="[object Date]"===Object.prototype.toString.call(e)?e.valueOf():NaN;return Number.isNaN(r)?Vr.invalid("invalid input"):(e=Ee(t.zone,Le.defaultZone)).isValid?new Vr({ts:r,zone:e,loc:Ge.fromObject(t)}):Vr.invalid(Vr._unsupportedZone(e))}static fromMillis(e,t={}){if(m(e))return e<-864e13||864e13<e?Vr.invalid("Timestamp out of range"):new Vr({ts:e,zone:Ee(t.zone,Le.defaultZone),loc:Ge.fromObject(t)});throw new u(`fromMillis requires a numerical input, but received a ${typeof e} with value ${e}`)}static fromSeconds(e,t={}){if(!m(e))throw new u("fromSeconds requires a numerical input");return new Vr({ts:1e3*e,zone:Ee(t.zone,Le.defaultZone),loc:Ge.fromObject(t)})}static fromObject(e={},t={}){const r=Ee(t.zone,Le.defaultZone);if(!r.isValid)return Vr.invalid(Vr._unsupportedZone(r));var s=Le.now(),n=m(t.specificOffset)?t.specificOffset:r.offset(s),i=I(e,Ir),a=h(i.ordinal),u=h(i.year),l=h(i.month)||h(i.day),c=u||l;u=i.weekYear||i.weekNumber,t=Ge.fromObject(t);if((c||a)&&u)throw new o("Can't mix weekYear/weekNumber units with year/month/day or ordinals");if(l&&a)throw new o("Can't mix ordinal dates with month/day");return u=u||i.weekday&&!c,s=br(s,n),n={containsGregor:c,containsOrdinal:a,loc:t,normalized:i,obj:e,offsetProvis:n,useWeekData:u,zoneToUse:r},u?Vr._buildObject(n,jr,Nr,fr(s)):a?Vr._buildObject(n,xr,Dr,_r(s)):Vr._buildObject(n,Er,Mr,s)}static fromISO(e,t={}){var[r,s]=tt(e,[kt,Et],[Mt,jt],[Nt,xt],[Dt,It]);return Sr(r,s,t,"ISO 8601",e)}static fromRFC2822(e,t={}){var[r,s]=tt(e.replace(/\([^)]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").trim(),[vt,pt]);return Sr(r,s,t,"RFC 2822",e)}static fromHTTP(e,t={}){var[r,s]=tt(e,[wt,Tt],[Ot,Tt],[bt,St]);return Sr(r,s,t,"HTTP",e)}static fromFormat(e,t,r={}){if(d(e)||d(t))throw new u("fromFormat requires an input string and a format");var{locale:s,numberingSystem:n}=r,[i,a,s,n]=function(e,t,r){var{result:s,zone:e,specificOffset:t,invalidReason:r}=or(e,t,r);return[s,e,t,r]}(Ge.fromOpts({locale:s,numberingSystem:n,defaultToEN:!0}),e,t);return n?Vr.invalid(n):Sr(i,a||null,r,`format ${t}`,e,s)}static fromString(e,t,r={}){return Vr.fromFormat(e,t,r)}static fromSQL(e,t={}){var[r,s]=tt(e,[Vt,Et],[Ct,Ft]);return Sr(r,s,t,"SQL",e)}static invalid(e,t){if(!e)throw new u("need to specify a reason the DateTime is invalid");if(t=e instanceof $t?e:new $t(e,t),Le.throwOnInvalid)throw new r(t);return new Vr({invalid:t})}static isDateTime(e){return!(!e||!e._isLuxonDateTime)}static min(...e){if(!e.every(Vr.isDateTime))throw new u("min requires all arguments be DateTimes");return _(e,(e=>e.valueOf()),Math.min)}static max(...e){if(!e.every(Vr.isDateTime))throw new u("max requires all arguments be DateTimes");return _(e,(e=>e.valueOf()),Math.max)}static fromFormatExplain(e,t,r={}){var{locale:s,numberingSystem:r}=r;return or(Ge.fromOpts({locale:s,numberingSystem:r,defaultToEN:!0}),e,t)}static fromStringExplain(e,t,r={}){return Vr.fromFormatExplain(e,t,r)}static _buildObject(e,t,r,s){let n=!1;t.forEach((t=>{h(e.normalized[t])?n=!0:e.normalized[t]=n?r[t]:s[t]}));var i,a,o,u=(e.useWeekData?(a=f((i=e.normalized).weekYear),t=g(i.weekNumber,1,N(i.weekYear)),o=g(i.weekday,1,7),a?t?!o&&cr("weekday",i.weekday):cr("week",i.weekNumber):cr("weekYear",i.weekYear)):e.containsOrdinal?(o=f((u=e.normalized).year),i=g(u.ordinal,1,S(u.year)),o?!i&&cr("ordinal",u.ordinal):cr("year",u.year)):vr(e.normalized))||pr(e.normalized);if(u)return Vr.invalid(u);const l=e.useWeekData?yr(e.normalized):e.containsOrdinal?gr(e.normalized):e.normalized,[c,d]=Tr(l,e.offsetProvis,e.zoneToUse),m=new Vr({ts:c,zone:e.zoneToUse,o:d,loc:e.loc});return e.normalized.weekday&&e.containsGregor&&e.obj.weekday!==m.weekday?Vr.invalid("mismatched weekday",`you can't specify both a weekday of ${e.normalized.weekday} and a date of ${m.toISO()}`):m}static _lastOpts(e){let t,r={};return t=0<e.length&&"object"==typeof e[e.length-1]?(r=e.pop(),e):Array.from(e),[r,t]}static _quickDT(e,t){const r=Ee(t.zone,Le.defaultZone),s=Ge.fromObject(t),n=Le.now();let i,a;if(h(e.year)){for(const t of Er)d(e[t])&&(e[t]=Mr[t]);if(t=vr(e)||pr(e))return Vr.invalid(t);t=r.offset(n),[i,a]=Tr(e,t,r)}else i=n;return new Vr({ts:i,zone:r,loc:s,o:a})}static _diffRelative(e,t,r){const s=!!d(r.round)||r.round,n=(e,n)=>{e=b(e,s||r.calendary?0:2,!0);return t._loc.clone(r).relFormatter(r).format(e,n)},i=s=>r.calendary?t.hasSame(e,s)?0:t.startOf(s).diff(e.startOf(s),s).get(s):t.diff(e,s).get(s);if(r.unit)return n(i(r.unit),r.unit);for(const e of r.units){var a=i(e);if(1<=Math.abs(a))return n(a,e)}return n(t<e?-0:0,r.units[r.units.length-1])}static _unsupportedZone(e){return new $t("unsupported zone",`the zone "${e.name}" is not supported`)}get(e){return this[e]}resolvedLocaleOptions(e={}){var{locale:t,numberingSystem:r,calendar:e}=Ke.create(this._loc.clone(e),e).resolvedOptions(this);return{locale:t,numberingSystem:r,outputCalendar:e}}toLocal(){return this.setZone(Le.defaultZone)}toUTC(e=0,t={}){return this.setZone(Ne.instance(e),t)}setZone(e,{keepLocalTime:t=!1,keepCalendarTime:r=!1}={}){if((e=Ee(e,Le.defaultZone)).equals(this.zone))return this;if(e.isValid){let s=this._ts;return(t||r)&&(t=e.offset(this._ts),s=Tr(r=this.toObject(),t,e)[0]),this._clone({ts:s,zone:e})}return Vr.invalid(Vr._unsupportedZone(e))}reconfigure(e){return e=this._loc.clone(e),this._clone({loc:e})}setLocale(e){return this.reconfigure({locale:e})}set(e){if(!this.isValid)return this;var t,r=h((t=I(e,Ir)).weekYear)||h(t.weekNumber)||h(t.weekday),s=h(t.ordinal),n=h(t.year),i=h(t.month)||h(t.day);e=t.weekYear||t.weekNumber;if((n||i||s)&&e)throw new o("Can't mix weekYear/weekNumber units with year/month/day or ordinals");if(i&&s)throw new o("Can't mix ordinal dates with month/day");let a;r?a=yr(Object.assign(Object.assign({},fr(this._c)),t)):d(t.ordinal)?(a=Object.assign(Object.assign({},this.toObject()),t),d(t.day)&&(a.day=Math.min(k(a.year,a.month),a.day))):a=gr(Object.assign(Object.assign({},_r(this._c)),t));var[r,t]=Tr(a,this._o,this.zone);return this._clone({ts:r,o:t})}plus(e){return this.isValid?(e=qt.fromDurationLike(e),this._clone(this._adjustTime(e))):this}minus(e){return this.isValid?(e=qt.fromDurationLike(e).negate(),this._clone(this._adjustTime(e))):this}startOf(e){if(!this.isValid)return this;const t={},r=qt.normalizeUnit(e);switch(r){case"years":t.month=1;case"quarters":case"months":t.day=1;case"weeks":case"days":t.hour=0;case"hours":t.minute=0;case"minutes":t.second=0;case"seconds":t.millisecond=0}return"weeks"===r&&(t.weekday=1),"quarters"===r&&(e=Math.ceil(this.month/3),t.month=3*(e-1)+1),this.set(t)}endOf(e){return this.plus({[e]:1}).startOf(e).minus({milliseconds:1})}toFormat(e,t={}){return this.isValid?Ke.create(this._loc.redefaultToEN(t)).formatDateTimeFromString(this,e):wr}toLocaleString(e=z,t={}){return this.isValid?Ke.create(this._loc.clone(t),e).formatDateTime(this):wr}toLocaleParts(e={}){return this.isValid?Ke.create(this._loc.clone(e),e).formatDateTimeParts(this):[]}toISO({format:e="extended",suppressSeconds:t=!1,suppressMilliseconds:r=!1,includeOffset:s=!0,extendedZone:n=!1}={}){return this.isValid?(e="extended"===e,[this._toISODate(e),"T",this._toISOTime(e,t,r,s,n)].join("")):null}toISODate(e={format:"extended"}){let t="basic"===e.format?"yyyyMMdd":"yyyy-MM-dd";return 9999<this.year&&(t="+"+t),kr(this,t)}toISOWeekDate(){return kr(this,"kkkk-'W'WW-c")}toISOTime({suppressMilliseconds:e=!1,suppressSeconds:t=!1,includeOffset:r=!0,includePrefix:s=!1,extendedZone:n=!1,format:i="extended"}={}){return this.isValid?[s?"T":"",this._toISOTime("extended"===i,t,e,r,n)].join(""):null}toRFC2822(){return kr(this,"EEE, dd LLL yyyy HH:mm:ss ZZZ",!1)}toHTTP(){return kr(this.toUTC(),"EEE, dd LLL yyyy HH:mm:ss 'GMT'")}toSQLDate(){return this.isValid?this._toISODate(!0):null}toSQLTime({includeOffset:e=!0,includeZone:t=!1,includeOffsetSpace:r=!0}={}){let s="HH:mm:ss.SSS";return(t||e)&&(r&&(s+=" "),t?s+="z":e&&(s+="ZZ")),kr(this,s,!0)}toSQL(e={}){return this.isValid?`${this.toSQLDate()} ${this.toSQLTime(e)}`:null}toString(){return this.isValid?this.toISO():wr}valueOf(){return this.toMillis()}toMillis(){return this.isValid?this.ts:NaN}toSeconds(){return this.isValid?this._ts/1e3:NaN}toUnixInteger(){return this.isValid?Math.floor(this.ts/1e3):NaN}toJSON(){return this.toISO()}toBSON(){return this.toJSDate()}toObject(e={includeConfig:!1}){if(!this.isValid)return{};const t=Object.assign({},this._c);return e.includeConfig&&(t.outputCalendar=this.outputCalendar,t.numberingSystem=this._loc.numberingSystem,t.locale=this._loc.locale),t}toJSDate(){return new Date(this.isValid?this._ts:NaN)}diff(e,t="milliseconds",r={}){if(!this.isValid||!e.isValid){var s=this.invalidReason||e.invalidReason;return qt.invalid(s,"created by diffing an invalid DateTime")}const n=(Array.isArray(t)?t:[t]).map(qt.normalizeUnit),i=e.valueOf()>this.valueOf(),a=((e,t,r,s)=>{let[n,i,a,o]=function(e,t,r){var s,n,i=[["years",(e,t)=>t.year-e.year],["quarters",(e,t)=>t.quarter-e.quarter+4*(t.year-e.year)],["months",(e,t)=>t.month-e.month+12*(t.year-e.year)],["weeks",(e,t)=>((t=Pt(e,t))-t%7)/7],["days",Pt]];const a={};let o,u=e,l=e.reconfigure({});for([s,n]of i)if(0<=r.indexOf(s)){o=s;let e=n(l,t);u=l.plus({[s]:e}),u>t?(l=l.plus({[s]:e-1}),--e):l=u,a[s]=e}return[l,a,u,o]}(e,t,r);return e=+t-+n,r=r.filter((e=>0<=["hours","minutes","seconds","milliseconds"].indexOf(e))),0===r.length&&(a<t&&(a=n.plus({[o]:1})),a!==n&&(i[o]=(i[o]||0)+e/(+a-+n))),t=qt.fromObject(i,s),0<r.length?qt.fromMillis(e,s).shiftTo(...r).plus(t):t})(i?this:e,i?e:this,n,Object.assign({locale:this.locale,numberingSystem:this.numberingSystem},r));return i?a.negate():a}diffNow(e="milliseconds",t={}){return this.diff(Vr.now(),e,t)}until(e){return Wt.fromDateTimes(this,e)}hasSame(e,t){if(!this.isValid)return!1;var r=e.valueOf();const s=this.setZone(e.zone,{keepLocalTime:!0});return+s.startOf(t)<=r&&r<=+s.endOf(t)}equals(e){return this.valueOf()===e.valueOf()&&this.zone.equals(e.zone)&&this._loc.equals(e._loc)}toRelative(e={}){if(!this.isValid)return null;var t=e.base||Vr.fromObject({},{zone:this.zone}),r=e.padding?this<t?-e.padding:e.padding:0;let s=["years","months","days","hours","minutes","seconds"],n=e.unit;return Array.isArray(e.unit)&&(s=e.unit,n=void 0),Vr._diffRelative(t,this.plus(r),Object.assign(Object.assign({},e),{numeric:"always",units:s,unit:n}))}toRelativeCalendar(e={}){return this.isValid?Vr._diffRelative(e.base||Vr.fromObject({},{zone:this.zone}),this,Object.assign(Object.assign({},e),{numeric:"auto",units:["years","months","days"],calendary:!0})):null}_possiblyCachedWeekData(e){return null===e._weekData&&(e._weekData=fr(e._c)),e._weekData}_clone(e){var t={ts:this._ts,zone:this.zone,c:this._c,o:this._o,loc:this._loc,invalid:this._invalid||void 0};return new Vr(Object.assign(Object.assign(Object.assign({},t),e),{old:t}))}_adjustTime(e){var t=this._o,r=this._c.year+Math.trunc(e.years),s=this._c.month+Math.trunc(e.months)+3*Math.trunc(e.quarters);s=Object.assign(Object.assign({},this._c),{year:r,month:s,day:Math.min(this._c.day,k(r,s))+Math.trunc(e.days)+7*Math.trunc(e.weeks)}),e=qt.fromObject({years:e.years-Math.trunc(e.years),quarters:e.quarters-Math.trunc(e.quarters),months:e.months-Math.trunc(e.months),weeks:e.weeks-Math.trunc(e.weeks),days:e.days-Math.trunc(e.days),hours:e.hours,minutes:e.minutes,seconds:e.seconds,milliseconds:e.milliseconds}).as("milliseconds");let[n,i]=Or(M(s),t,this.zone);return 0!==e&&(n+=e,i=this.zone.offset(n)),{ts:n,o:i}}_toISODate(e){var t=9999<this._c.year||this._c.year<0;let r="";return t&&0<=this._c.year&&(r+="+"),r+=v(this._c.year,t?6:4),e?(r+="-",r+=v(this._c.month),r+="-"):r+=v(this._c.month),r+=v(this._c.day),r}_toISOTime(e,t,r,s,n){let i=v(this._c.hour);return e?(i+=":",i+=v(this._c.minute),0===this._c.second&&t||(i+=":")):i+=v(this._c.minute),0===this._c.second&&t||(i+=v(this._c.second),0===this._c.millisecond&&r||(i+=".",i+=v(this._c.millisecond,3))),s&&(this.isOffsetFixed&&0===this.offset&&!n?i+="Z":this._o<0?(i+="-",i+=v(Math.trunc(-this._o/60)),i+=":",i+=v(Math.trunc(-this._o%60))):(i+="+",i+=v(Math.trunc(this._o/60)),i+=":",i+=v(Math.trunc(this._o%60)))),n&&(i+="["+this.zone.ianaName+"]"),i}}Vr.DATE_SHORT=z,Vr.DATE_MED=q,Vr.DATE_MED_WITH_WEEKDAY=A,Vr.DATE_FULL=U,Vr.DATE_HUGE=W,Vr.TIME_SIMPLE=R,Vr.TIME_WITH_SECONDS=P,Vr.TIME_WITH_SHORT_OFFSET=H,Vr.TIME_WITH_LONG_OFFSET=J,Vr.TIME_24_SIMPLE=Y,Vr.TIME_24_WITH_SECONDS=G,Vr.TIME_24_WITH_SHORT_OFFSET=B,Vr.TIME_24_WITH_LONG_OFFSET=Q,Vr.DATETIME_SHORT=K,Vr.DATETIME_SHORT_WITH_SECONDS=X,Vr.DATETIME_MED=ee,Vr.DATETIME_MED_WITH_SECONDS=te,Vr.DATETIME_MED_WITH_WEEKDAY=re,Vr.DATETIME_FULL=se,Vr.DATETIME_FULL_WITH_SECONDS=ne,Vr.DATETIME_HUGE=ie,Vr.DATETIME_HUGE_WITH_SECONDS=ae,e.DateTime=Vr,e.Duration=qt,e.FixedOffsetZone=Ne,e.IANAZone=ke,e.Info=Rt,e.Interval=Wt,e.Intl=c,e.InvalidZone=De,e.ORDERED_UNITS=$,e.REVERSE_ORDERED_UNITS=Z,e.Settings=Le,e.SystemZone=xe,e.VERSION="3.4.0",e.Zone=Oe,Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
